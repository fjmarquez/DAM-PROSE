package Entidades;

public class TestWallet {
	
	public void test1() {
		
		//Instancia de Wallet con contraseña por defecto y un set al balance de 1000.0
		Wallet carteraLeo = new Wallet();
		carteraLeo.setBalance(1000.0);
		
		//Instancia de Wallet con contraseña por defecto y un set al balance de 1000.0
		Wallet carteraFernando = new Wallet();
		carteraFernando.setBalance(1000.0);
		
		//Instancia de Wallet con contraseña y balance por defecto
		Wallet carteraMiguel = new Wallet();
		
		//Contraseña que establecemos por defecto
		final String PASSWORD_GENERICA = "Nervion";
		
		//Objeto generico que usaremos como monitor en bloques synchronized
		Object monitor = new Object();
		
		//Tranferira el dinero de carteraLeo a carteraMiguel, de uno en uno
		Thread h1 = new Thread(() -> {
							
				for(int i = 0; i < 1000; i++) {
					
					synchronized(monitor) {
						
						carteraLeo.transferTo(carteraMiguel, PASSWORD_GENERICA, 1);
						//System.out.println("leo");
						
					}
					
				}
			
		});
		
		//Transferira el dinero de carteraFernando a carteraMiguel igual que el anterior hilo
		Thread h2 = new Thread(() -> {
			
				for(int i = 0; i < 1000; i++) {
					
					synchronized(monitor) {
						
						carteraFernando.transferTo(carteraMiguel, PASSWORD_GENERICA, 1);
						//System.out.println("fernando");
						
					}
					
				}
				
		});
		
		h1.start();
		h2.start();
		
	}
	
	public void test2() {
			
		//Wallet instanciada con contraseña por defecto y un set al balance de 1000000.0
		Wallet carteraFran = new Wallet();
		carteraFran.setBalance(1000000.0);
		
		//Wallet instanciada con constraseña y parametros por defecto
		Wallet carteraElonMusk = new Wallet();
		
		//Contraseña que establecemos por defecto
		final String PASSWORD_GENERICA = "Nervion";
		
		//Contraseña que establecemos por defecto
		final String PASSWORD_INCORRECTA = "Sevilla";
		
		//Objeto generico que usaremos como monitor en bloques synchronized
		Object monitor = new Object();

		//Transferira el dinero desde mi cartera a la de Elon Musk de uno en uno
		Thread h1 = new Thread(() -> {
			
			boolean estado;
			
			while(carteraFran.getBalance() != 0) {
				
				synchronized(monitor) {
					
					estado = carteraFran.transferTo(carteraElonMusk, PASSWORD_GENERICA, 1);
					System.out.println("Transferencia Correcta");
					
				}
				
				//Coloco ThreadSleep fuera del bloque synchronized para no bloquear a h2
				if(!estado) {
					try {
						Thread.sleep(carteraFran.getMillis());
					} catch (InterruptedException e) {
						e.printStackTrace();
					}
				}
				
			}
			
		});
		
		//Transferira el dinero desde mi cartera a la de Elon Musk de uno en uno, pero esta vez con una contraseña incorrecta
		Thread h2 = new Thread(() -> {
			
			boolean estado;
			
			while(carteraFran.getBalance() != 0) {
				
				synchronized(monitor) {
					
					estado = carteraFran.transferTo(carteraElonMusk, PASSWORD_INCORRECTA, 1);
					System.out.println("Transferencia Incorrecta");
					
				}
				
				
				//Coloco ThreadSleep fuera del bloque synchronized para no bloquear a h1
				if(!estado) {
					try {
						Thread.sleep(carteraFran.getMillis());
					} catch (InterruptedException e) {
						e.printStackTrace();
					}
				}
				
			}
			
		});
		
		h1.start();
		h2.start();
		
	}
	
	public void test3() {
		
		
		
	}

}
